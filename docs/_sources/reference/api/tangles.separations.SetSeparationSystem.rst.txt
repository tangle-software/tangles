SetSeparationSystem
===================

.. currentmodule:: tangles.separations

.. autoclass:: SetSeparationSystem




   .. rubric:: Methods

   .. toctree::
      :hidden:

      tangles.separations.SetSeparationSystem.__getitem__
      tangles.separations.SetSeparationSystem.add_seps
      tangles.separations.SetSeparationSystem.all_sep_ids
      tangles.separations.SetSeparationSystem.assemble_meta_info
      tangles.separations.SetSeparationSystem.compute_infimum
      tangles.separations.SetSeparationSystem.crossing_seps
      tangles.separations.SetSeparationSystem.get_corners
      tangles.separations.SetSeparationSystem.get_sep_ids
      tangles.separations.SetSeparationSystem.infimum_of_two
      tangles.separations.SetSeparationSystem.is_le
      tangles.separations.SetSeparationSystem.is_nested
      tangles.separations.SetSeparationSystem.metadata_matrix
      tangles.separations.SetSeparationSystem.separation_metadata
      tangles.separations.SetSeparationSystem.with_array
      tangles.separations.SetSeparationSystem.with_sparse_array

   .. list-table::
      :widths: 50 50

      * - :func:`__getitem__`
        - Access the data of the separation or separations
      * - :func:`add_seps`
        - Add separations to the separation system
      * - :func:`all_sep_ids`
        - Returns
      * - :func:`assemble_meta_info`
        - If the user has entered custom meta info for a separation, then that is prioritised before everything else
      * - :func:`compute_infimum`
        - Calculate the infimum of a list of separation ids and orientations
      * - :func:`crossing_seps`
        - Generator to get all crossing separations from the list of separations
      * - :func:`get_corners`
        - Calculate the four corners of two separations in the separation system
      * - :func:`get_sep_ids`
        - If the separations are already contained inside of the separation system then return the
      * - :func:`infimum_of_two`
        - Calculate the infimum of two oriented separations from the separation system and add this infimum as a
      * - :func:`is_le`
        - Check if separation :math:`a` specified by `sep_id_a` is less than or equal to separation :math:`b` specified by `sep_id_b`,
      * - :func:`is_nested`
        - Checks whether two separations are nested
      * - :func:`metadata_matrix`
        - Explain the meaning of a separation, generated by repeatedly taking corners of separations,
      * - :func:`separation_metadata`
        - Returns the metadata of the separation `sep_id`
      * - :func:`with_array`
        - Create a new SetSeparationSystem from a separation matrix
      * - :func:`with_sparse_array`
        - Create a new SetSeparationSystem from a sparse separation matrix
